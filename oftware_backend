[1mdiff --git a/.env.example b/.env.example[m
[1mnew file mode 100644[m
[1mindex 0000000..5ef1692[m
[1m--- /dev/null[m
[1m+++ b/.env.example[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32m# Database Configuration[m
[32m+[m[32mDB_URL=jdbc:postgresql://localhost:5432/your_database[m
[32m+[m[32mDB_USERNAME=your_username[m
[32m+[m[32mDB_PASSWORD=your_password[m
[32m+[m
[32m+[m[32m# JWT Configuration[m
[32m+[m[32mJWT_SECRET=your_jwt_secret_key[m
[32m+[m[32mJWT_EXPIRATION=3600000[m
[32m+[m
[32m+[m[32m# Mail Configuration[m
[32m+[m[32mMAIL_USERNAME=your_email@example.com[m
[32m+[m[32mMAIL_PASSWORD=your_email_password[m
[32m+[m[32mMAIL_HOST=smtp.gmail.com[m
[32m+[m[32mMAIL_PORT=587[m
[32m+[m
[32m+[m[32m# Server Configuration[m
[32m+[m[32mSERVER_PORT=8080[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 1aa6fd5..d9f3112 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -13,6 +13,9 @@[m [mtarget/[m
 .springBeans[m
 .sts4-cache[m
 [m
[32m+[m[32mapplication.yml[m
[32m+[m[32m.application.yml[m
[32m+[m
 .env.local[m
 .config-data[m
 .env[m
[1mdiff --git a/README.local.md b/README.local.md[m
[1mnew file mode 100644[m
[1mindex 0000000..5b95003[m
[1m--- /dev/null[m
[1m+++ b/README.local.md[m
[36m@@ -0,0 +1,60 @@[m
[32m+[m[32m# Local Development Security Considerations[m
[32m+[m
[32m+[m[32m## Environment Variables and Credentials[m
[32m+[m
[32m+[m[32m### Importance[m
[32m+[m
[32m+[m[32mThis project uses environment variables to manage sensitive configuration like database credentials, API keys, and other secrets.[m
[32m+[m
[32m+[m[32m### Security Best Practices[m
[32m+[m
[32m+[m[32m1. **NEVER commit .env files to version control**[m
[32m+[m
[32m+[m[32m   - The `.env` file is listed in `.gitignore` to prevent accidental commits[m
[32m+[m[32m   - Always use `.env.example` as a template with placeholder values[m
[32m+[m
[32m+[m[32m2. **Creating Your Local Environment**[m
[32m+[m
[32m+[m[32m   - Copy `.env.example` to `.env`[m
[32m+[m[32m   - Fill in your local development credentials[m
[32m+[m[32m   - Keep this file private to your development machine[m
[32m+[m
[32m+[m[32m3. **Managing Secrets in Production**[m
[32m+[m[32m   - In production environments, set environment variables through your hosting platform[m
[32m+[m[32m   - Railway.app provides environment variable management in their dashboard[m
[32m+[m
[32m+[m[32m## Temporary Schema Validation Workaround[m
[32m+[m
[32m+[m[32mA schema validation issue currently exists between entity models and the database:[m
[32m+[m
[32m+[m[32m- The `birthdate` column in the `users` table is defined as `date` in the database[m
[32m+[m[32m- The entity model expects it to be `timestamp(6)`[m
[32m+[m
[32m+[m[32m### Current Workaround[m
[32m+[m
[32m+[m[32mSchema validation has been temporarily disabled in `application.properties`:[m
[32m+[m
[32m+[m[32m```properties[m
[32m+[m[32mspring.jpa.hibernate.ddl-auto=none[m
[32m+[m[32mspring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m### Proper Resolution (To Be Implemented)[m
[32m+[m
[32m+[m[32mThis should be resolved by either:[m
[32m+[m
[32m+[m[32m1. Updating the entity models to match the database schema, or[m
[32m+[m[32m2. Migrating the database schema to match entity models[m
[32m+[m
[32m+[m[32m## Security Headers and CORS[m
[32m+[m
[32m+[m[32mMake sure to test security headers and CORS configuration before deploying to production.[m
[32m+[m
[32m+[m[32m## JWT Secret Key Security[m
[32m+[m
[32m+[m[32mThe JWT secret key should be:[m
[32m+[m
[32m+[m[32m- At least 32 characters long[m
[32m+[m[32m- Randomly generated[m
[32m+[m[32m- Unique per environment[m
[32m+[m[32m- Never shared outside of secure channels[m
[1mdiff --git a/cookies.txt b/cookies.txt[m
[1mnew file mode 100644[m
[1mindex 0000000..c31d989[m
[1m--- /dev/null[m
[1m+++ b/cookies.txt[m
[36m@@ -0,0 +1,4 @@[m
[32m+[m[32m# Netscape HTTP Cookie File[m
[32m+[m[32m# https://curl.se/docs/http-cookies.html[m
[32m+[m[32m# This file was generated by libcurl! Edit at your own risk.[m
[32m+[m
[1mdiff --git a/h --force origin main b/h --force origin main[m
[1mnew file mode 100644[m
[1mindex 0000000..2029f74[m
[1m--- /dev/null[m
[1m+++ b/h --force origin main[m	
[36m@@ -0,0 +1 @@[m
[32m+[m[32m* [32mmain[m[m
[1mdiff --git a/pom.xml b/pom.xml[m
[1mindex e768f48..63b5908 100644[m
[1m--- a/pom.xml[m
[1m+++ b/pom.xml[m
[36m@@ -48,6 +48,12 @@[m
       <version>42.6.0</version>[m
     </dependency>[m
 [m
[32m+[m[32m    <dependency>[m
[32m+[m[32m      <groupId>com.h2database</groupId>[m
[32m+[m[32m      <artifactId>h2</artifactId>[m
[32m+[m[32m      <scope>runtime</scope>[m
[32m+[m[32m    </dependency>[m
[32m+[m
     <dependency>[m
       <groupId>org.springframework.boot</groupId>[m
       <artifactId>spring-boot-starter-test</artifactId>[m
[36m@@ -100,11 +106,35 @@[m
       <version>1.18.36</version>[m
       <scope>provided</scope>[m
     </dependency>[m
[32m+[m[32m    <dependency>[m
[32m+[m[32m      <groupId>me.paulschwarz</groupId>[m
[32m+[m[32m      <artifactId>spring-dotenv</artifactId>[m
[32m+[m[32m      <version>3.0.0</version>[m
[32m+[m[32m    </dependency>[m
   </dependencies>[m
 [m
 [m
   <build>[m
     <plugins>[m
[32m+[m[32m      <plugin>[m
[32m+[m[32m        <groupId>org.apache.maven.plugins</groupId>[m
[32m+[m[32m        <artifactId>maven-compiler-plugin</artifactId>[m
[32m+[m[32m        <version>3.13.0</version>[m
[32m+[m[32m        <configuration>[m
[32m+[m[32m          <source>${java.version}</source>[m
[32m+[m[32m          <target>${java.version}</target>[m
[32m+[m[32m          <annotationProcessorPaths>[m
[32m+[m[32m            <path>[m
[32m+[m[32m              <groupId>org.projectlombok</groupId>[m
[32m+[m[32m              <artifactId>lombok</artifactId>[m
[32m+[m[32m              <version>1.18.36</version>[m
[32m+[m[32m            </path>[m
[32m+[m[32m          </annotationProcessorPaths>[m
[32m+[m[32m          <fatalWarnings>[m
[32m+[m[32m            <warning>ERROR</warning>[m
[32m+[m[32m          </fatalWarnings>[m
[32m+[m[32m        </configuration>[m
[32m+[m[32m      </plugin>[m
       <plugin>[m
         <groupId>org.springframework.boot</groupId>[m
         <artifactId>spring-boot-maven-plugin</artifactId>[m
[1mdiff --git a/src/main/java/com/seproject/backend/config/DevConfig.java b/src/main/java/com/seproject/backend/config/DevConfig.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5343365[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/config/DevConfig.java[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32mpackage com.seproject.backend.config;[m
[32m+[m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
[32m+[m[32mimport org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.context.annotation.Profile;[m
[32m+[m[32mimport org.springframework.mail.javamail.JavaMailSender;[m
[32m+[m[32mimport org.springframework.mail.javamail.JavaMailSenderImpl;[m
[32m+[m
[32m+[m[32m@Configuration[m
[32m+[m[32m@Profile("dev")[m
[32m+[m[32mpublic class DevConfig {[m
[32m+[m[41m    [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Provides a no-op mail sender for development environments[m
[32m+[m[32m     */[m
[32m+[m[32m    @Bean[m
[32m+[m[32m    public JavaMailSender javaMailSender() {[m
[32m+[m[32m        return new JavaMailSenderImpl(); // Empty implementation that won't actually send emails[m
[32m+[m[32m    }[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/seproject/backend/controller/AuthController.java b/src/main/java/com/seproject/backend/controller/AuthController.java[m
[1mindex 31ae462..903daf5 100644[m
[1m--- a/src/main/java/com/seproject/backend/controller/AuthController.java[m
[1m+++ b/src/main/java/com/seproject/backend/controller/AuthController.java[m
[36m@@ -39,7 +39,7 @@[m [mimport com.seproject.backend.annotations.RoleRequired;[m
 @RequestMapping("/api/auth")[m
 public class AuthController {[m
 [m
[31m-    @Value("${cookie.domain}")[m
[32m+[m[32m    @Value("${cookie.domain:localhost}")[m
     private String cookieDomain;[m
     @Autowired[m
     private UserRepository userRepository;[m
[1mdiff --git a/src/main/java/com/seproject/backend/controller/ChatMessageController.java b/src/main/java/com/seproject/backend/controller/ChatMessageController.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3fc4b0f[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/controller/ChatMessageController.java[m
[36m@@ -0,0 +1,59 @@[m
[32m+[m[32mpackage com.seproject.backend.controller;[m
[32m+[m
[32m+[m[32mimport com.seproject.backend.dto.ChatMessageDTO;[m
[32m+[m[32mimport com.seproject.backend.service.ChatMessageService;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ChatMessageController[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This controller handles HTTP requests related to chat messages.[m
[32m+[m[32m * It provides endpoints for creating and retrieving chat messages.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Key features:[m
[32m+[m[32m * - POST endpoint for creating messages[m
[32m+[m[32m * - GET endpoint for retrieving messages[m
[32m+[m[32m * - Proper response handling[m
[32m+[m[32m * - Input validation[m
[32m+[m[32m */[m
[32m+[m[32m@RestController[m
[32m+[m[32m@RequestMapping("/api/teamspaces/{teamspaceId}/chat")[m
[32m+[m[32mpublic class ChatMessageController {[m
[32m+[m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    private ChatMessageService chatMessageService;[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Creates a new chat message in a teamspace[m
[32m+[m[32m     * @param teamspaceId The ID of the teamspace[m
[32m+[m[32m     * @param messageDTO The message data[m
[32m+[m[32m     * @param senderId The ID of the message sender (from authentication)[m
[32m+[m[32m     * @return The created message[m
[32m+[m[32m     */[m
[32m+[m[32m    @PostMapping[m
[32m+[m[32m    public ResponseEntity<ChatMessageDTO> createMessage([m
[32m+[m[32m            @PathVariable Long teamspaceId,[m
[32m+[m[32m            @RequestBody ChatMessageDTO messageDTO,[m
[32m+[m[32m            @RequestHeader("X-User-ID") Long senderId) {[m
[32m+[m[41m        [m
[32m+[m[32m        messageDTO.setTeamspaceId(teamspaceId);[m
[32m+[m[32m        ChatMessageDTO createdMessage = chatMessageService.createMessage(messageDTO, senderId);[m
[32m+[m[32m        return ResponseEntity.ok(createdMessage);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Retrieves all messages for a specific teamspace[m
[32m+[m[32m     * @param teamspaceId The ID of the teamspace[m
[32m+[m[32m     * @return List of chat messages[m
[32m+[m[32m     */[m
[32m+[m[32m    @GetMapping[m
[32m+[m[32m    public ResponseEntity<List<ChatMessageDTO>> getMessages([m
[32m+[m[32m            @PathVariable Long teamspaceId) {[m
[32m+[m[41m        [m
[32m+[m[32m        List<ChatMessageDTO> messages = chatMessageService.getMessagesByTeamspace(teamspaceId);[m
[32m+[m[32m        return ResponseEntity.ok(messages);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/seproject/backend/dto/ChatMessageDTO.java b/src/main/java/com/seproject/backend/dto/ChatMessageDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3c566aa[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/dto/ChatMessageDTO.java[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32mpackage com.seproject.backend.dto;[m
[32m+[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport java.time.LocalDateTime;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ChatMessageDTO (Data Transfer Object)[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This DTO is used to transfer chat message data between the client and server.[m
[32m+[m[32m * It contains only the necessary fields for message display and creation.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Key features:[m
[32m+[m[32m * - Message ID[m
[32m+[m[32m * - Message content[m
[32m+[m[32m * - Timestamp[m
[32m+[m[32m * - Sender information[m
[32m+[m[32m * - Teamspace ID[m
[32m+[m[32m */[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class ChatMessageDTO {[m
[32m+[m[32m    private Long messageId;[m
[32m+[m[32m    private String message;[m
[32m+[m[32m    private LocalDateTime timestamp;[m
[32m+[m[32m    private UserDTO sender;[m
[32m+[m[32m    private Long teamspaceId;[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/seproject/backend/dto/UserDTO.java b/src/main/java/com/seproject/backend/dto/UserDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..01f5d76[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/dto/UserDTO.java[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32mpackage com.seproject.backend.dto;[m
[32m+[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport java.time.LocalDate;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * UserDTO (Data Transfer Object)[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This DTO is used to transfer user data between the client and server.[m
[32m+[m[32m * It contains only the necessary fields for user information display.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Key features:[m
[32m+[m[32m * - User ID[m
[32m+[m[32m * - Basic user information[m
[32m+[m[32m * - No sensitive data (password)[m
[32m+[m[32m */[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class UserDTO {[m
[32m+[m[32m    private Long userId;[m
[32m+[m[32m    private String firstName;[m
[32m+[m[32m    private String lastName;[m
[32m+[m[32m    private String email;[m
[32m+[m[32m    private String username;[m
[32m+[m[32m    private LocalDate birthdate;[m
[32m+[m[32m    private String role;[m
[32m+[m[32m    private boolean verified;[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/seproject/backend/dto/UserPayload.java b/src/main/java/com/seproject/backend/dto/UserPayload.java[m
[1mindex b000a48..229b2bb 100644[m
[1m--- a/src/main/java/com/seproject/backend/dto/UserPayload.java[m
[1m+++ b/src/main/java/com/seproject/backend/dto/UserPayload.java[m
[36m@@ -7,7 +7,7 @@[m [mimport lombok.AllArgsConstructor;[m
 @Data[m
 @AllArgsConstructor[m
 public class UserPayload {[m
[31m-    private int user_id;[m
[32m+[m[32m    private Long user_id;[m
     private String firstName;[m
     private String lastName;[m
     private String email;[m
[1mdiff --git a/src/main/java/com/seproject/backend/dto/UserRegistration.java b/src/main/java/com/seproject/backend/dto/UserRegistration.java[m
[1mindex 7738d97..6f856eb 100644[m
[1m--- a/src/main/java/com/seproject/backend/dto/UserRegistration.java[m
[1m+++ b/src/main/java/com/seproject/backend/dto/UserRegistration.java[m
[36m@@ -31,7 +31,6 @@[m [mpublic class UserRegistration {[m
     @NotEmpty(message = "Username is required")[m
     @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters")[m
     @Pattern(regexp = "^\\S+$", message = "Username must not contain spaces")[m
[31m-[m
     private String username;[m
 [m
     @NotEmpty(message = "Password is required")[m
[1mdiff --git a/src/main/java/com/seproject/backend/entity/ChatMessage.java b/src/main/java/com/seproject/backend/entity/ChatMessage.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e850be1[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/entity/ChatMessage.java[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32mpackage com.seproject.backend.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport java.time.LocalDateTime;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * ChatMessage Entity[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This entity represents a chat message in the system.[m
[32m+[m[32m * It is associated with a teamspace and a sender (user).[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Key features:[m
[32m+[m[32m * - Unique message ID[m
[32m+[m[32m * - Message content[m
[32m+[m[32m * - Timestamp[m
[32m+[m[32m * - Many-to-One relationship with Teamspace[m
[32m+[m[32m * - Many-to-One relationship with User (sender)[m
[32m+[m[32m */[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "chat_messages")[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class ChatMessage {[m
[32m+[m[41m    [m
[32m+[m[32m    @Id[m
[32m+[m[32m    @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+[m[32m    @Column(name = "message_id")[m
[32m+[m[32m    private Long messageId;[m
[32m+[m
[32m+[m[32m    @ManyToOne(fetch = FetchType.LAZY)[m
[32m+[m[32m    @JoinColumn(name = "teamspace_id", nullable = false)[m
[32m+[m[32m    private Teamspace teamspace;[m
[32m+[m
[32m+[m[32m    @ManyToOne(fetch = FetchType.LAZY)[m
[32m+[m[32m    @JoinColumn(name = "sender_id", nullable = false)[m
[32m+[m[32m    private User sender;[m
[32m+[m
[32m+[m[32m    @Column(nullable = false, columnDefinition = "TEXT")[m
[32m+[m[32m    private String message;[m
[32m+[m
[32m+[m[32m    @Column(nullable = false)[m
[32m+[m[32m    private LocalDateTime timestamp = LocalDateTime.now();[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/seproject/backend/entity/Project.java b/src/main/java/com/seproject/backend/entity/Project.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a58639f[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/seproject/backend/entity/Project.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.seproject.backend.entity;[m
[32m+[m
[32m+[m[32mimport jakarta.persistence.*;[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m[32mimport java.time.LocalDateTime;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Project Entity[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * This entity represents a project in the system.[m
[32m+[m[32m * Projects can contain multiple teamspaces and are created by users.[m
[32m+[m[32m *[m[41m [m
[32m+[m[32m * Key features:[m
[32m+[m[32m * - Unique project ID[m
[32m+[m[32m * - Name and description[m
[32m+[m[32m * - Creation date[m
[32m+[m[32m * - Creator relationship[m
[32m+[m[32m * - One-to-Many relationship with Teamspaces[m
[32m+[m[32m */[m
[32m+[m[32m@Entity[m
[32m+[m[32m@Table(name = "projects")[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class Project {[m
[32m+[m[41m    [m
[32m+[m[32m    @Id[m
[32m+[m[32m    @GeneratedValue(strategy = GenerationType.IDENTITY)[m
[32m+[m[32m    @Column(name = "project_id")[m
[32m+[m[32m    private Long projectId;[m
[32m+[m
[32m+[m[32m    @Column(nullable = false)[m
[32m+[m[32m    private String name;[m
[32m+[m
[32m+[m[32m    private String description;[m
[32m+[m
[32m+[m[32m    @Column(name = "creation_date", nullable = false)[m
[32m+[m[32m    private LocalDateTime creationDate = LocalDateTime.now();[m
[32m+[m
[32m+[m[32m    @ManyToOne(fetch = FetchType.LAZY)[m
[32m+[m[32m    @JoinColumn(name = "created_by")[m
[32m+[m[32m    private User createdBy;[m
[32m+[m
[32m+[m[32m    @OneToMany(mappedBy = "project", cascade = CascadeType.ALL)[m
[32m+[m[32m    private List<Tea